studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.02
} else {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.05
}
}
print(studienbeitraege_master)
for(i in 1:){
if(studienbeitraege_master[i,2] > 110000) {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.02
} else {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.05
}
}
print(studienbeitraege_master)
nrow(studienbeitraege_master)
studiengaenge <- c("WiWi","Medi","Nutzlos")
studienbeitraege <- c(10000,110000,120000)
studienbeitraege_master <- cbind(studiengaenge,studienbeitraege)
for(i in 1:nrow(studienbeitraege_master)){
if(studienbeitraege_master[i,2] > 110000) {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.02
} else {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*1.05
}
}
print(studienbeitraege_master)
################## Initialisierung - BITTE ÄNDERN
studiengaenge <- c("WiWi","Medi","Nutzlos")
studienbeitraege <- c(10000,110000,120000)
studienbeitraege_master <- cbind(studiengaenge,studienbeitraege)
mindestgrenze <- 110000
prozentsatz_1 <- 1.02
prozentsatz_2 <- 1.05
################## Rechnung
for(i in 1:nrow(studienbeitraege_master)){
if(studienbeitraege_master[i,2] > mindestgrenze) {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*prozentsatz_1
} else {
studienbeitraege_master[i,2] <- as.numeric(studienbeitraege_master[i,2])*prozentsatz_2
}
}
print(studienbeitraege_master)
studienbeitraege_master[i,"studienbeitraege"]
studiengaenge <- c("WiWi","Medi","Nutzlos")
studienbeitraege <- c(10000,110000,120000)
studienbeitraege_master <- cbind(studiengaenge,studienbeitraege)
mindestgrenze <- 110000
prozentsatz_1 <- 1.02
prozentsatz_2 <- 1.05
################## Rechnung
for(i in 1:nrow(studienbeitraege_master)){
if(studienbeitraege_master[i,"studienbeitraege"] > mindestgrenze) {
studienbeitraege_master[i,"studienbeitraege"] <- as.numeric(studienbeitraege_master[i,"studienbeitraege"])*prozentsatz_1
} else {
studienbeitraege_master[i,"studienbeitraege"] <- as.numeric(studienbeitraege_master[i,"studienbeitraege"])*prozentsatz_2
}
}
print(studienbeitraege_master)
install.packages(„readxl“)
library (readxl)
data_xlsx <- read_excel("Apotheken-in-Deutschland.xlsx", na="NA")
install.packages("readxl“)
library (readxl)
data_xlsx <- read_excel("data.xlsx", na="NA")
shiny::runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
infradata<-rbindlist(list(Ubahn,
Apotheken,
Feuerwehrstationen,
Krankenhauser_und_Kliniken,
Fitnessstudios_und_Sportplätze,
Bushaltestellen,
DBBahnhofe,
Schulen,
Polizeistationen,
Garten_und_Parks), use.names = TRUE, fill = TRUE)
view(Spielerei)
library(sp)
library(rgdal)
library(tidyverse)
library(ggplot2)
library(sf)
library(broom)
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
#Spielerei_tidy = tidy(Spielerei)
view(Spielerei)
Spielerei@data <- Spielerei@data %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
view(Spielerei_tidy)
view(geo_data_merged)
glimpse(Spielerei)
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
Spielerei@data <- Spielerei@data %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
Spielerei$id <- row.names(Spielerei)
Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
view(Spielerei_tidy)
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
#Spielerei_tidy = tidy(Spielerei)
#Spielerei@data <- Spielerei@data %>%
#add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
#Spielerei@data <- Spielerei@data %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
#Spielerei@data <- Spielerei@data %>%
#add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
#Spielerei@data <- Spielerei@data %>%
#add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
Spielerei$id <- row.names(Spielerei)
Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
Spielerei@data <- Spielerei@data %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
Spielerei$id <- row.names(Spielerei)
Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
#Spielerei@data <- Spielerei@data %>%
#add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
Spielerei$id <- row.names(Spielerei)
Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
#Spielerei_tidy = tidy(Spielerei)
Spielerei <- Spielerei %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
#Spielerei_tidy = tidy(Spielerei)
Spielerei <- Spielerei %>%
add_column(runif = runif(nrow(Spielerei),min=1,max=100))
#Spielerei$id <- row.names(Spielerei)
#Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
Spielerei = readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
Spielerei_tidy = tidy(Spielerei)
Spielerei@data <- Spielerei@data %>%
add_column(runif = runif(nrow(Spielerei@data),min=1,max=100))
Spielerei$id <- row.names(Spielerei)
Spielerei_tidy <- left_join(Spielerei_tidy, Spielerei@data)
ggplot(Spielerei_tidy, aes(x = long, y = lat, group = group, fill = runif)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
shiny::runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
install.packages("ggmap")
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp()
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
View(geo_data_merged)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
library(tidyverse)
library(tidygeocoder)
library(sf)
#Einlesen der Daten zu Landkreisen als Geo-Daten-Objekt
landkreise3<-st_read(dsn = "/Users/cedric/Dropbox/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
k_trans<-st_transform(landkreise3, 2163) %>%
select(NUTS_CODE, NUTS_NAME, geometry)
######################
#"geo_data_full" in der Funktion "rank_finder" wird nicht importiert
#müsste "geo_data_merged.csv" entsprechen
#Import einfügen
#Muss überhaupt hier importiert werden? Eventuell reicht Import in global.R
######################
#Definieren einer Funktion, um die im Dashboard eingegebene Adresse einem Landkreis zuzuordnen
adresse_finden <- reactive({
df<-data.frame(Adresse = input$adresse) #Die Adresse wird aus dem Input in der Shiny-App gezogen
a_conv<-df %>%
geocode(Adresse, method = "osm", lat = Latitude, long = Longitude) #Längen und Breitengrad für Adresse wird gefunden
a_conv_sf<-st_as_sf(a_conv, coords = c("Longitude", "Latitude")) #Transformation in Geo-Funktion lesbare Längen und Breitengrade
#Projektionen zuordnen
st_crs(a_conv_sf)<-4326
a_pnts <- st_transform(a_conv_sf, 2163)
a_join<-st_join(a_pnts, k_trans, join = st_within) #Join der Adressdaten aus Input und Datei zu Landkreisen
a_join
})
#Funktion um aus Datensatz mit Infra-Rank den Rank des Landkreises zu finden, in dem die eingegebene Adresse liegt
rank_finder<-function(b){
c<-geo_data_full %>%
filter(NUTS_CODE == b$NUTS_CODE)
c
}
#Funktion, um den Infrarank der eingegebenen Adresse grafisch darzustellen
plot_rank<-function(c){
d<-ggplot(c) +
aes(x = type, y = med_relation * 100) +
geom_bar(stat = "identity") +
labs(title = "Infrastruktur im Verhältnis zum deutschen Median", x = "Infrastrukturkategorie", y = "Prozentuale Abweichung vom Median", caption = "Quelle: Internet")
d
}
#Funktion, die jeder Kategorie Gewichtung zuweist
rank_generator<-function(a,b,c,d,e,f,g,h,i){
tribble(
~type, ~weight,
"Apotheke", a,
"Bahnhof", b,
"Bushaltestelle", c,
"Feuerwehrstation", d,
"Fitnessstudio/Sportplatz", e,
"Krankenhaus", f,
"Park", g,
"Polizeistation", h,
"Schule", i
)
}
#Funktion, die Gewichtung nach Landkreis aggregiert
weight_generator<-function(data){
inner_join(geo_data_merged, data, by = "type") %>%
mutate(weighted_rank = weight*Infra_rank) %>%
group_by(NUTS_CODE, Kreise) %>%
summarise(full_rank = sum(weighted_rank))
}
library(tidyverse)
library(tidygeocoder)
library(sf)
#Einlesen der Daten zu Landkreisen als Geo-Daten-Objekt
landkreise3<-st_read(dsn = "/Users/cedric/Dropbox/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
k_trans<-st_transform(landkreise3, 2163) %>%
select(NUTS_CODE, NUTS_NAME, geometry)
######################
#"geo_data_full" in der Funktion "rank_finder" wird nicht importiert
#müsste "geo_data_merged.csv" entsprechen
#Import einfügen
#Muss überhaupt hier importiert werden? Eventuell reicht Import in global.R
######################
#Definieren einer Funktion, um die im Dashboard eingegebene Adresse einem Landkreis zuzuordnen
adresse_finden <- reactive({
df<-data.frame(Adresse = input$adresse) #Die Adresse wird aus dem Input in der Shiny-App gezogen
a_conv<-df %>%
geocode(Adresse, method = "osm", lat = Latitude, long = Longitude) #Längen und Breitengrad für Adresse wird gefunden
a_conv_sf<-st_as_sf(a_conv, coords = c("Longitude", "Latitude")) #Transformation in Geo-Funktion lesbare Längen und Breitengrade
#Projektionen zuordnen
st_crs(a_conv_sf)<-4326
a_pnts <- st_transform(a_conv_sf, 2163)
a_join<-st_join(a_pnts, k_trans, join = st_within) #Join der Adressdaten aus Input und Datei zu Landkreisen
a_join
})
#Funktion um aus Datensatz mit Infra-Rank den Rank des Landkreises zu finden, in dem die eingegebene Adresse liegt
rank_finder<-function(b){
c<-geo_data_full %>%
filter(NUTS_CODE == b$NUTS_CODE)
c
}
#Funktion, um den Infrarank der eingegebenen Adresse grafisch darzustellen
plot_rank<-function(c){
d<-ggplot(c) +
aes(x = type, y = med_relation * 100) +
geom_bar(stat = "identity") +
labs(title = "Infrastruktur im Verhältnis zum deutschen Median", x = "Infrastrukturkategorie", y = "Prozentuale Abweichung vom Median", caption = "Quelle: Internet")
d
}
#Funktion, die jeder Kategorie Gewichtung zuweist
rank_generator<-function(a,b,c,d,e,f,g,h,i){
tribble(
~type, ~weight,
"Apotheke", a,
"Bahnhof", b,
"Bushaltestelle", c,
"Feuerwehrstation", d,
"Fitnessstudio/Sportplatz", e,
"Krankenhaus", f,
"Park", g,
"Polizeistation", h,
"Schule", i
)
}
#Funktion, die Gewichtung nach Landkreis aggregiert
weight_generator<-function(data){
inner_join(geo_data_merged, data, by = "type") %>%
mutate(weighted_rank = weight*Infra_rank) %>%
group_by(NUTS_CODE, Kreise) %>%
summarise(full_rank = sum(weighted_rank))
}
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
library(sf)
library(tidygeocoder)
library(sf)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
?geocode
library(sf)
library(tidygeocoder)
?geocode
geocode("Witten")
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
detach(ggmap)
detach("ggmap")
detach(package::ggmap)
detach("package::ggmap")
detach(package:ggmap)
geocode("Witten")
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
geo_data_tidy<-tidy(k_trans)
geo_data_tidy2 <- left_join(geo_data_tidy, k_trans@data)
#full_polygon_data<-left_join(geo_data_tidy2, map_data, by = "NUTS_CODE")
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
geo_data_tidy2 <- left_join(geo_data_tidy, landkreise3@data)
geo_data_tidy<-tidy(landkreise3)
geo_data_tidy2 <- left_join(geo_data_tidy, landkreise3@data)
#full_polygon_data<-left_join(geo_data_tidy2, map_data, by = "NUTS_CODE")
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
geo_data_tidy
geo_data_tidy<-tidy(landkreise3)
geo_data_tidy<-tidy(landkreise3)
geo_data_tidy
geo_data_tidy<-tidy(Spielerei) landkreise3
landkreise3<-st_read(dsn = "//Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3"
geo_data_tidy<-tidy(landkreise3)
lk3<-readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
geo_data_tidy<-tidy(landkreise3) #landkreise3 ist nicht das gleiche wie SPielerei
geo_data_tidy
lk3<-readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
geo_data_tidy<-tidy(lk3) #landkreise3 ist nicht das gleiche wie SPielerei
geo_data_tidy
geo_data_tidy
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
geo_data_tidy
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data, by = id)
lk3$id<row.names(lk3)
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
geo_data_tidy
lk3$id<-row.names(lk3)
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "black", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
geo_data_merged<-read_csv("/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/geo_data_merged.csv")
lk<-readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
landkreise3<-st_read(dsn = "//Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
k_trans <- st_transform(landkreise3, 2163) %>%
select(NUTS_CODE, NUTS_NAME, geometry)
lk<-readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
lk3<-readOGR(dsn = "/Users/georgwamsler/Dropbox (Privat)/Universität/9.Semester/Data Science II/All_data/nuts5000_12-31.gk3.shape/nuts5000", layer = "5000_NUTS3")
geo_data_tidy<-tidy(lk3) #landkreise3 ist nicht das gleiche wie SPielerei
lk3$id<-row.names(lk3)
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
#full_polygon_data<-left_join(geo_data_tidy2, map_data, by = "NUTS_CODE")
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "grey", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
geo_data_tidy<-tidy(lk3) #landkreise3 ist nicht das gleiche wie SPielerei
lk3$id<-row.names(lk3)
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
#full_polygon_data<-left_join(geo_data_tidy2, map_data, by = "NUTS_CODE")
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "grey", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
geo_data_tidy<-tidy(lk3) #landkreise3 ist nicht das gleiche wie SPielerei
lk3$id<-row.names(lk3)
geo_data_tidy2 <- left_join(geo_data_tidy, lk3@data)
#full_polygon_data<-left_join(geo_data_tidy2, map_data, by = "NUTS_CODE")
ggplot(geo_data_tidy2, aes(x = long, y = lat, group = group)) +
geom_polygon(color = "green", size = 0.1) +
coord_equal() +
theme_minimal()
labs(
title = "Infrastruktur im Verhältnis zum deutschen Median",
x = "Infrastrukturkategorie",
y = "Prozentuale Abweichung vom Median",
caption = "Quelle: Internet"
)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
View(geo_data_tidy)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
?plotOutput
?plotOutput
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
a<-rank_generator(1,1,1,1,1,1,1,1,1)
b<-weight_generator(a)
b
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
view(input_data)
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp()
runApp()
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
runApp()
runApp('Desktop/GitHub/infraviz/Web.AppGeorg')
